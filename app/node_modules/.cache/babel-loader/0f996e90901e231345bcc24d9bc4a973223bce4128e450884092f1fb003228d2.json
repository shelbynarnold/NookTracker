{"ast":null,"code":"var _jsxFileName = \"/home/shelb/Development/code/phase-5/NookTracker/app/src/Bugs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Bugs() {\n  _s();\n  const [bugs, setBugs] = useState([]);\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    fetch(\"/lists/bugs\").then(response => response.json()).then(bugs => setBugs(bugs));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of bugs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), bugs.map(bug => /*#__PURE__*/_jsxDEV(BugItem, {\n      bug: bug\n    }, bug.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(Bugs, \"wg5nyY9t86v4Z6sh5UABc17GSag=\");\n_c = Bugs;\nconst BugItem = _ref => {\n  let {\n    bug\n  } = _ref;\n  const addBugClick = bug => {\n    const newBugObj = {\n      item_id: bug.id\n    };\n    fetch(\"/list\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newBugObj)\n    }).then(r => r.json()).then(newRoute => {\n      setList(prevRouteList => [...prevRouteList, newRoute]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: bug.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bug.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addBugClick(bug),\n      children: \"Add bug to list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 1\n  }, this);\n};\n_c2 = BugItem;\nvar _c, _c2;\n$RefreshReg$(_c, \"Bugs\");\n$RefreshReg$(_c2, \"BugItem\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Bugs","_s","bugs","setBugs","list","setList","fetch","then","response","json","children","fileName","_jsxFileName","lineNumber","columnNumber","map","bug","BugItem","id","_c","_ref","addBugClick","newBugObj","item_id","method","headers","body","JSON","stringify","r","newRoute","prevRouteList","title","src","image","onClick","_c2","$RefreshReg$"],"sources":["/home/shelb/Development/code/phase-5/NookTracker/app/src/Bugs.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nexport function Bugs() {\n    const [bugs, setBugs] = useState([]);\n    const [list, setList] = useState([])\n    useEffect(() => {\n        fetch(\"/lists/bugs\")\n        .then((response) => response.json())\n        .then((bugs) => setBugs(bugs));\n\n}, []);\n\n\nreturn (\n    <section>\n        <h1>List of bugs</h1>\n        {bugs.map((bug) => (\n            <BugItem key={bug.id} bug={bug} />\n        ))}\n        </section>\n)}\nconst BugItem = ({bug}) => {\n    const addBugClick = (bug) => {\n        \n        const newBugObj = {\n            item_id:bug.id\n            }\n            \n            fetch(\"/list\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\":\"application/json\",\n                  },\n                  body:JSON.stringify(newBugObj)\n                })\n                .then((r)=>r.json())\n                .then((newRoute)=>{\n                  setList((prevRouteList)=>[...prevRouteList,newRoute])\n                } )\n    }\n    return (\n<div>\n    <p>{bug.title}</p>\n    <img src={bug.image} />\n    <button onClick={()=>addBugClick(bug)}>Add bug to list</button>\n</div>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,OAAO,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpCC,SAAS,CAAC,MAAM;IACZS,KAAK,CAAC,aAAa,CAAC,CACnBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEL,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC,CAAC;EAEtC,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIH,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAAW,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBZ,IAAI,CAACa,GAAG,CAAEC,GAAG,iBACVjB,OAAA,CAACkB,OAAO;MAAcD,GAAG,EAAEA;IAAI,GAAjBA,GAAG,CAACE,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AACjB;AAACb,EAAA,CAlBcD,IAAI;AAAAmB,EAAA,GAAJnB,IAAI;AAmBpB,MAAMiB,OAAO,GAAGG,IAAA,IAAW;EAAA,IAAV;IAACJ;EAAG,CAAC,GAAAI,IAAA;EAClB,MAAMC,WAAW,GAAIL,GAAG,IAAK;IAEzB,MAAMM,SAAS,GAAG;MACdC,OAAO,EAACP,GAAG,CAACE;IACZ,CAAC;IAEDZ,KAAK,CAAC,OAAO,EAAE;MACTkB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAC;MACjB,CAAC;MACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACN,SAAS;IAC/B,CAAC,CAAC,CACDf,IAAI,CAAEsB,CAAC,IAAGA,CAAC,CAACpB,IAAI,CAAC,CAAC,CAAC,CACnBF,IAAI,CAAEuB,QAAQ,IAAG;MAChBzB,OAAO,CAAE0B,aAAa,IAAG,CAAC,GAAGA,aAAa,EAACD,QAAQ,CAAC,CAAC;IACvD,CAAE,CAAC;EACf,CAAC;EACD,oBACJ/B,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAAW,QAAA,EAAIM,GAAG,CAACgB;IAAK;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBf,OAAA;MAAKkC,GAAG,EAAEjB,GAAG,CAACkB;IAAM;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvBf,OAAA;MAAQoC,OAAO,EAAEA,CAAA,KAAId,WAAW,CAACL,GAAG,CAAE;MAAAN,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEN,CAAC;AAAAsB,GAAA,GA1BKnB,OAAO;AAAA,IAAAE,EAAA,EAAAiB,GAAA;AAAAC,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}